channel coin, coffee, tea

-- our first vending machine

VM =
  coin ->
    ( coffee -> VM
      []
      tea -> VM )

assert VM :[has trace[T]]: <coin,coffee>

assert VM :[has trace[T]]: <coin,coin>

assert VM :[has trace[F]]: <coin,coffee>

-- all three will hold

NVM =
  coin ->
    ( coffee -> VM
      |~|
      tea -> VM )

assert NVM :[has trace[T]]: <coin,coffee>

assert NVM :[has trace[T]]: <coin,coin>

assert NVM :[has trace[F]]: <coin,coffee>

-- the third check will fail, as after performing coin NVM can perform
-- coffee, but it can also refuse coffee: on the way to the complete
-- trace <coin,coffee> ifthese were the only events that we were
-- willing to share with the process, in that order, we could get
-- stuck; the trace is not deterministically available 

assert VM :[deterministic[F]]

assert NVM :[deterministic[F]]

SVM = 
  coin ->
    ( coffee -> SVM
      |~|
      tea -> SVM 
      |~| 
      STOP )
      
assert SVM :[has trace[T]]: <coin,coffee>

assert SVM :[has trace[T]]: <coin,coin>

assert SVM :[has trace[F]]: <coin,coffee>

-- again, the third check will fail; in terms of these checks, which
-- explore one trace (or one event being offered) at a time, there is no
-- difference between this process and NVM

channel refill

max_water = 6 

VMW =
  let
     State(w) =
       w > 0 & coin ->
         ( coffee -> State(w-1)
            []
            tea -> State(w-1) )
      []
      refill -> State(max_water)
  within
    State(max_water)

assert VMW :[deadlock free]



VMF =
  let
     State(w) =
       coin ->
         w > 0 & 
           ( coffee -> State(w-1)
              []
            tea -> State(w-1) )
        []
        refill -> State(max_water)
  within
    State(max_water)

-- Deadlock: No events are possible!
-- Can't do coffee or tea (guard failed)
-- Can't do refill (already committed to coin branch)
-- Can't do coin (already performed it)

-- VMF accepts payment (coin) before checking if it can deliver a drink. 
-- Once committed to the coin branch, there's no way back to the refill option. 
-- This models a vending machine that takes your money even when empty and then gets stuck!

assert VMF :[deadlock free]
	 
