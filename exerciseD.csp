PlayerID = {0,1}
K = 15
channel look : PlayerID . {0..K}
channel take : PlayerID . {0..K}
channel turn, win : PlayerID
min(i,j) = if i < j then i else j


-- constraints
alphaMatches = {| look, take |}
Matches = 
    let
        Remaining(n) =
            ((n > 0) & [] m : {1..n} @ take?p!m -> Remaining(n-m))
            []
            look?p!n -> Remaining(n)
    within
        Remaining(K)


alphaPlayer(p) = {| turn, look.p, take.p, win.p |}

Player(p) =
    let
        YourTurn = turn.(p+1)%2 -> MyTurn
        MyTurn = turn.p -> Look(p)
        Look(p) = look!p?n -> Looked(n)
        
        Looked(n) = 
            ((n > 0) & (|~| k : {1..min(3,n)} @ take!p!k -> YourTurn))
            []
            (n == 0) &  win.p -> STOP

    within
        MyTurn [] YourTurn

alphaPlayers = {| turn, look, take, win |}
Players = || p : PlayerID @ [alphaPlayer(p)] Player(p)
Game = Matches [ alphaMatches || alphaPlayers ] Players

-- SomebodyWins
SomebodyWins = |~| p : PlayerID @ win.p -> STOP

assert SomebodyWins [F= Game \ {| turn, take, look |}

-- SmartPlayer


-- Bridges Problem
datatype LOC = A | B | C | D
channel start, depart, arrive, finish : LOC

Location(l) =
    let
        Here = depart.l -> NotHere
        NotHere = start.l -> Here [] arrive.l -> Here [] finish.l -> STOP 
    within
        NotHere

Locations = ||| l : LOC @ Location(l)

channel done

Bridge(l,m) =
    depart.l -> arrive.m -> done -> STOP
    []
    depart.m -> arrive.l -> done -> STOP

bridge(1) = Bridge(A,B)
bridge(2) = Bridge(A,B)
bridge(3) = Bridge(A,C)
bridge(4) = Bridge(B,C)
bridge(5) = Bridge(D,C)
bridge(6) = Bridge(D,B)
bridge(7) = Bridge(D,B)
bridge(8) = Bridge(D,C)

Bridges = [| {done} |] b : {1..8} @ bridge(b)

City = Locations [| {| arrive, depart, finish |} |] Bridges

Start = [] l : LOC @ start.l -> done -> finish.l -> STOP

Routes = City [| {| start, finish |} |] Start

assert STOP [T= Routes \ {| start, arrive, depart |}
assert Routes \ {| start, arrive, depart |} [T= done -> STOP

check(l) = done -> done -> done -> done -> done -> done -> done -> done -> finish.l -> STOP
Spec = [] l : LOC @ start.l -> check(l)

assert Spec [T= Routes \ {| arrive, depart |} 

