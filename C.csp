-- Abstract

channel aa, bb, cc, dd, ee, ff

P = aa -> ee -> P
    []
    bb -> ff -> P

Q = cc -> ee -> Q
    []
    dd -> ff -> Q

PQ = P [ {aa,bb,ee,ff} || {cc,dd,ee,ff} ] Q

R = aa -> cc -> R
    []
    cc -> aa -> R
    []
    bb -> dd -> R
    []
    dd -> bb -> R

PQR = PQ [ {aa,bb,cc,dd,ee,ff} || {aa,bb,cc,dd} ] R

S =
  let
    OfferAll = 
      aa -> Next 
      []
      bb -> Next 
      []
      cc -> Next
      []
      dd -> Next
      []
      ( ( ee -> OfferAll [] ff -> OfferAll ) |~| STOP )

    Next =
      ( |~| x : {aa,bb,cc,dd} @ x -> Next)
      |~|
      ( |~| x : {ee,ff} @ x -> OfferAll)
      |~|
      STOP
   within
     OfferAll

-- because the internal choice with STOP means that any combination of
-- events could be blocked, it doesn't make any difference if we offer
-- an external choice between ee and ff or an internal choice between ee
-- and ff

assert S [FD= PQR

-- Lifts

FLOOR = {0,1}

datatype PERSON = pA | pB

channel enterBuilding, exitBuilding : PERSON
channel enterLift, exitLift, call : FLOOR . PERSON

Floor(f) = 
  let
    Holding(P) =
      call!f?p:P -> Holding(P)
      []
      enterLift!f?p:P -> Holding(diff(P,{p}))
      []
      exitLift!f?p -> Holding(union(P,{p}))
      []
      f == 0 & ( enterBuilding?p -> Holding(union(P,{p}))
                 []
                 exitBuilding?p:P -> Holding(diff(P,{p})) )
  within
    Holding({})

Floors =
  Floor(0) [ aFloor(0) || aFloor(1) ] Floor(1)

aFloor(0) =
  {| call.0, enterLift.0, exitLift.0,
       enterBuilding, exitBuilding |} 
        
aFloor(1) =
  {| call.1, enterLift.1, exitLift.1 |} 
        
aFloors = {| call, enterLift, exitLift, 
               enterBuilding, exitBuilding |}

channel request : FLOOR . PERSON
channel goto : FLOOR
channel close, open 

aLift = {| request, enterLift, exitLift, 
             open, close, goto, check |}

Lift = 
  let
    Open(f,P) =
      request?g?p:P -> Open(f,P)
      []
      enterLift!f?p -> Open(f,union(P,{p}))
      []
      exitLift!f?p:P -> Open(f,diff(P,{p}))
      []
      close -> Closed(f,P)

    Closed(f,P) =
      request?g?p:P -> Closed(f,P)
      []
      goto?g -> Closed(g,P)      
      []
      open -> Open(f,P)
  within 
    Open(0,{})

SmartLift = 
  let
    Open(f,P,A) =
      request?g?p:P -> Open(f,P,A)
      []
      enterLift!f?p -> Open(f,union(P,{p}),A)
      []
      exitLift!f?p:P -> Open(f,diff(P,{p}),A)
      []
      check?p!yes -> Open(f,P,union(A,{p}))
      []
      close -> Closed(f,P,A)

    Closed(f,P,A) =
      request?g?p:P -> Closed(f,P,A)
      []
      check?p!yes -> Closed(f,P,union(A,{p}))
      []
      goto?g -> Closed(g,P,A)      
      []
      (P == A) & open -> Open(f,P,A)
  within 
    Open(0,{},{})

  channel authorise, deauthorise : PERSON
  datatype AUTHORISED = yes | no 
  channel check : PERSON . AUTHORISED

  aController = {| goto, request, call, 
                  authorise, deauthorise, check |}

Controller = 
  let   
    State(s,A) = 
      s != <> & goto!head(s) -> State(tail(s),A)
      []
      length(s) < 3 & ( request?f?p:A -> State(s^<f>,A) 
                        []
                        call?f?p:A -> State(s^<f>,A) )
      []
      authorise?p -> State(s,union(A,{p}))
      []
      deauthorise?p -> State(s,diff(A,{p}))
      []
      check?p:A!yes -> State(s,A)
      []
      check?p:diff(PERSON,A)!no -> State(s,A)
  within
    State(<>,{}) 

Building =
  (Lift [aLift || aController] Controller)
  [ union(aLift,aController) || aFloors ]
  Floors   

assert Building :[deadlock free]

Secure =
  let
    Authorised(A) =
      ([] e : {| enterBuilding, exitBuilding, enterLift, 
         exitLift.0, goto, call, request, open, 
           close, check |} @ e -> Authorised(A))
      []
      authorise?p -> Authorised(union(A,{p}))
      []
      deauthorise?p -> Authorised(diff(A,{p}))
      []
      exitLift.1?p:A -> Authorised(A)
  within
    Authorised({})

  assert Secure [T= Building

aBuilding = {| enterLift, request, authorise, deauthorise, exitLift, enterBuilding, exitBuilding, open, close, goto |}

aAssumption = {| enterLift, exitLift, deauthorise |}

Alternative(p) =
  let
    InLift = exitLift?f!p -> NotInLift

    NotInLift = enterLift?f!p -> InLift
                []
		deauthorise.p -> NotInLift
  within
    NotInLift

BuildingWithAssumption = Building [ aBuilding || aAssumption ] Assumption

assert Secure [T= BuildingWithAssumption

Assumption =
  ||| p : PERSON @ Alternative(p)

BuildingWithSmartLift =
   (SmartLift [aLift || aController] Controller)
   [ union(aLift,aController) || aFloors ]
   Floors

BuildingWithSmartLiftWithAssumption = BuildingWithSmartLift [ aBuilding || aAssumption ] Assumption

assert Secure [T= BuildingWithSmartLiftWithAssumption

assert BuildingWithSmartLiftWithAssumption :[deadlock free]

