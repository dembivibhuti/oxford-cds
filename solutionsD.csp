-- fun things that we could do!
--  * make point about precedence with indexed choice
--  * restart the game
--  * share the win or don't share the win
--  * make the decision within the player or leave it open for a friend
--  * consider what happens if you have three players

PlayerID = {0,1}

channel look : PlayerID . {0..15}
channel take : PlayerID . {0..15}
channel turn, win : PlayerID

-- channel restart 

min(i,j) = if i < j then i else j

alphaMatches = {| look, take |}

-- with restart 
-- alphaMatches = {| look, take, restart |}

Matches = 
  let
    Remaining(n) =
      ( (n > 0) & [] m : {1..n} @ take?p!m -> Remaining(n-m) )
      []
      look?p!n -> Remaining(n)
--      []
--      n == 0 & restart -> Remaining(15)
  within 
    Remaining(15)

alphaPlayer(p) = {| turn, look.p, take.p, win.p |}

-- alphaPlayer(p) = {| turn, look.p, take.p, win.p, restart |}

-- share both wins and carry on forever, or...

Player(p) = 
  let
    YourTurn =
      turn.(p+1)%2 -> MyTurn 
--      []
--      look.p.0 -> win.p -> restart -> (MyTurn [] YourTurn)
 
    MyTurn =
      turn.p -> Look
--      []
--      look.p.0 -> restart -> (MyTurn [] YourTurn)
      
    Look = 
      look!p?n -> Looked(n)
      
    Looked(n) =
      (n > 0) & (|~| k : {1..min(3,n)} @ take!p!k -> YourTurn)
      []
      (n == 0) & win.p -> STOP
      
--      (n == 0) & win.p -> restart -> (MyTurn [] YourTurn)
--      []
--      win.(p+1)%2 -> restart -> (MyTurn [] YourTurn)
      
  within 
    MyTurn [] YourTurn 

alphaPlayers = {| turn, look, take, win |}

-- alphaPlayers = {| turn, look, take, win, restart |}

Players =
  || p : PlayerID @ [alphaPlayer(p)] Player(p)
  
Game =
  Matches [ alphaMatches || alphaPlayers ] Players

assert Game :[deadlock free]

SomebodyWins = |~| p : PlayerID @ win.p -> STOP 

assert SomebodyWins [F= Game \ {| turn, look, take |}

SmartPlayer(p) = 
  let
    MyTurn =
      turn.p -> Look(p)
      
    Look(p) = 
      look!p?n -> Looked(n)
      
    Looked(n) =
      (n > 0) & Act(n)
      []
      (n == 0) & win.p -> STOP
      
    Act(n) = 
      n%4 == 1 & take!p!1 -> YourTurn
      []
      n%4 != 1 & take!p!(n+3)%4 -> YourTurn

    YourTurn =
      turn.(p+1)%2 -> MyTurn 
  within 
    MyTurn [] YourTurn 

-- easy for traces

FirstPlayerWins =
  let
    Wins(p) =
      win.p -> STOP
      []
      turn?q -> Wins(p)
  within
    |~| p : {0,1} @ turn.p -> Wins(p) 

-- harder for failures

FirstPlayerWins' =
  let
    Wins(p) =
      win.p -> STOP
      |~|
      ( STOP |~| turn?q -> Wins(p) ) 
  within
    |~| p : {0,1} @ turn.p -> Wins(p) 

SmartPlayers =
  || p : PlayerID @ [alphaPlayer(p)] SmartPlayer(p)
  
SmartGame =
  Matches [ alphaMatches || alphaPlayers ] SmartPlayers

assert FirstPlayerWins [T= SmartGame \ {| look, take |}
assert FirstPlayerWins' [FD= SmartGame \ {| look, take |}

-- BRIDGES


-- bridges of koenigsburg

datatype LOC = A | B | C | D

channel start, depart, arrive : LOC 

-- Star =
--   let
--     Started(L) =
--       card(L) < 1 & [] l : diff(LOC,L) @ start.l -> Started(union(L,{l}))
--   within
--     Started({})

-- StarC =
--   let
--     Started(n) =
--       n < 1 & start?l -> Started(n+1) 
--   within
--     Started(0)

-- assert Star [FD= StarC
-- assert StarC [FD= Star

channel done

Location(l) =
  let
    Here =
      depart.l -> NotHere

    NotHere =
      start.l -> Here
      []
      arrive.l -> Here
  within
    NotHere

Locations = ||| l : LOC @ Location(l)

Bridge(l,m) =
  depart.l -> arrive.m -> done -> STOP
  []
  depart.m -> arrive.l -> done -> STOP 

bridge(1) = Bridge(A,B) 
bridge(2) = Bridge(A,B)
bridge(3) = Bridge(A,C)
bridge(4) = Bridge(B,C)
bridge(5) = Bridge(B,D)
bridge(6) = Bridge(B,D)
bridge(7) = Bridge(C,D)
bridge(8) = Bridge(A,C)

Bridges = [| {done} |] b : {1..8} @ bridge(b)

City = 
  Locations [| {| arrive,depart |} |] Bridges

Start =
  [] l : LOC @ start.l -> STOP

Routes =
  City [| {| start |} |] Start
  
-- assert done -> STOP [FD= Routes \ {| start, arrive, depart |}

assert STOP [T= Routes \ {| start, arrive, depart |}

assert Routes \ {| start, arrive, depart |} [T= done -> STOP

-- ----------------------------------------------------------------------

